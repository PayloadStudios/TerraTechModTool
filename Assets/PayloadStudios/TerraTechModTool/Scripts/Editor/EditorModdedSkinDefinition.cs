using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(ModdedSkinDefinition))]
public class EditorModdedSkinDefinition : Editor
{
	private ModdedSkinDefinition m_SelectedSkin = null;
	private bool m_LegacyMode = false;
	private int m_SelectedCorp = 0;

	public override void OnInspectorGUI()
	{
		m_SelectedSkin = (ModdedSkinDefinition)target;
		UpdateSkinPreview();
		string path = AssetDatabase.GetAssetPath(m_SelectedSkin);
		string pathNoExt = path.Substring(0, path.LastIndexOf('.'));

		// Show panel for skin editing
		if (m_SelectedSkin != null)
		{
			bool dirty = false;

			if (!m_SelectedSkin.m_IsCorpDefault)
			{
				GUILayout.Label($"Currently Editing {m_SelectedSkin.name}", EditorGUITT.boldText);

				// Name
				GUILayout.BeginHorizontal();
				GUILayout.Label("Display Name:");
				string udpatedName = GUILayout.TextField(m_SelectedSkin.m_SkinDisplayName);
				if (udpatedName != m_SelectedSkin.m_SkinDisplayName)
				{
					m_SelectedSkin.m_SkinDisplayName = udpatedName;
				}
				GUILayout.EndHorizontal();

				// Corp selector --------------------
				GUILayout.Label("Corporation");
				m_SelectedCorp = -1;
				for (int i = 0; i < EditorWindowModDesigner.AvailableCorps.Length; i++)
				{
					if (EditorWindowModDesigner.AvailableCorps[i] == m_SelectedSkin.m_Corporation)
						m_SelectedCorp = i;
				}

				m_SelectedCorp = GUILayout.SelectionGrid(m_SelectedCorp, EditorWindowModDesigner.AvailableCorpIcons, EditorWindowModDesigner.kVanillaCorps.Length, EditorGUITT.corpButton);
				if (m_SelectedCorp != -1 && EditorWindowModDesigner.AvailableCorps[m_SelectedCorp] != m_SelectedSkin.m_Corporation)
				{
					dirty = true;
					m_SelectedSkin.m_Corporation = EditorWindowModDesigner.AvailableCorps[m_SelectedCorp];
				}
			}

			// To legacy users, remove the // in front of the following line to activate legacy mode (allows you to put in pre-combined metallic/smoothness textures)
			m_LegacyMode = GUILayout.Toggle(m_LegacyMode, "Legacy Mode (for importing from WhitePaw's CustomSkins mod)", EditorGUITT.wordWrapToggle);

			// Texture selectors ----------------------
			GUILayout.BeginHorizontal();
			// TODO: Error message text for "NOT 1024!"
			GUILayout.FlexibleSpace();
			Texture2D buttonTex = EditorGUITT.TextureField("Icon", m_SelectedSkin.m_SkinButtonImage);
			GUILayout.FlexibleSpace();
			Texture2D albedoTex = EditorGUITT.TextureField("Albedo", m_SelectedSkin.m_Albedo);
			GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();


			GUILayout.BeginHorizontal();
			GUILayout.FlexibleSpace();
			Texture2D emissiveTex = m_SelectedSkin.m_Emissive = EditorGUITT.TextureField("Emissive", m_SelectedSkin.m_Emissive);
			GUILayout.FlexibleSpace();
			Texture2D combinedTex = null;
			Texture2D metalTex = null;
			Texture2D smoothnessTex = null;
			if (m_LegacyMode)
			{
				combinedTex = EditorGUITT.TextureField("Smooth/Metal", m_SelectedSkin.m_Combined);
			}
			else
			{
				metalTex = EditorGUITT.TextureField("Metallic", m_SelectedSkin.m_Metal);
				GUILayout.FlexibleSpace();
				smoothnessTex = EditorGUITT.TextureField("Smoothness", m_SelectedSkin.m_Smoothness);
			}
			GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();

			// Set textures, and the dirty flag
			if (buttonTex != m_SelectedSkin.m_SkinButtonImage)
			{
				dirty = true;
				m_SelectedSkin.m_SkinButtonImage = buttonTex;
			}
			if (albedoTex != m_SelectedSkin.m_Albedo)
			{
				dirty = true;
				m_SelectedSkin.m_Albedo = albedoTex;
			}
			if (emissiveTex != m_SelectedSkin.m_Emissive)
			{
				dirty = true;
				m_SelectedSkin.m_Emissive = emissiveTex;
			}
			if (combinedTex != null && combinedTex != m_SelectedSkin.m_Combined)
			{
				dirty = true;
				m_SelectedSkin.m_Combined = combinedTex;
			}
			if (metalTex != null && metalTex != m_SelectedSkin.m_Metal)
			{
				dirty = true;
				m_SelectedSkin.m_Metal = metalTex;
			}
			if (smoothnessTex != null && smoothnessTex != m_SelectedSkin.m_Smoothness)
			{
				dirty = true;
				m_SelectedSkin.m_Smoothness = smoothnessTex;
			}

			// Show the autogenerated textures and include a manual re-generate button
			EditorGUITT.HorizontalLine(Color.black);
			if (GUILayout.Button("Adjust Preview Camera"))
			{
				Selection.activeGameObject = Camera.main.gameObject;
			}
			if (GUILayout.Button("Generate previews"))
			{
				dirty = true;
			}

			// Now, if anything changed or we requested a refresh, generate preview + combined metal/smooth
			if (dirty)
			{
				// The skin preview is dirty, so we need to re-render a preview icon
				string assetPath = $"{pathNoExt}_preview.tga";
				UpdateSkinPreview();

				// Give the camera a render texture of fixed size
				RenderTexture rendTex = RenderTexture.GetTemporary(512, 512, 24, RenderTextureFormat.ARGB32);
				RenderTexture.active = rendTex;
				RenderTexture old = Camera.main.targetTexture;

				// Render the tech
				Camera.main.targetTexture = rendTex;
				Camera.main.Render();

				// Copy it into our target texture
				Texture2D preview = new Texture2D(512, 512);
				preview.ReadPixels(new Rect(0, 0, 512, 512), 0, 0);

				// Write the target texture to disk
				File.WriteAllBytes(assetPath, ImageConversion.EncodeToTGA(preview));
				m_SelectedSkin.m_PreviewImage = AssetDatabase.LoadAssetAtPath<Texture2D>(assetPath);

				// Return the camera to its previous settings
				Camera.main.targetTexture = old;
				RenderTexture.active = null;
				RenderTexture.ReleaseTemporary(rendTex);

				// Do the metal + smoothness channel combine if we have made any changes
				m_SelectedSkin.GenerateCombinedTextureIfRequired(pathNoExt);

				// Now save
				EditorUtility.SetDirty(target);
				AssetImportCatcher.ManualSaveAssets();
				m_PreviewDirty = true; // Consumed by preview panel
			}

			// Display the generated textures and print the result of verification
			GUILayout.BeginHorizontal();
			EditorGUITT.TextureField("Preview", m_SelectedSkin.m_PreviewImage, false);
			EditorGUITT.TextureField("Metal+Smooth", m_SelectedSkin.m_Combined, false);

			GUILayout.BeginVertical();
			string verification = m_SelectedSkin.VerifyAsset();
			if(verification == null)
			{
				GUILayout.Label("Verification successful. Ready to export");
				GUILayout.Label(EditorGUITT.Tick);
			}
			else
			{
				GUILayout.Label(verification);
				GUILayout.Label(EditorGUITT.Cross);
			}
			GUILayout.EndVertical();

			GUILayout.EndHorizontal();
		}
	}

	public override bool HasPreviewGUI()
	{
		return true;
	}

	Editor m_PreviewEditor = null;
	GameObject m_PreviewingObject = null;
	bool m_PreviewDirty = true;
	public override void OnInteractivePreviewGUI(Rect r, GUIStyle background)
	{
		if (m_SelectedSkin != null)
		{
			UpdateSkinPreview();

			if (m_PreviewEditor != null && m_PreviewingObject != null)
			{
				m_PreviewEditor.DrawPreview(r);
			}
		}
		else
		{
			m_PreviewingObject = null;
			m_PreviewEditor = null;
		}
	}

	private void UpdateSkinPreview()
	{
		// Can't just find the object because it is inactive...
		foreach(GameObject t in Resources.FindObjectsOfTypeAll<GameObject>())
			if (t.name == "SkinPreviews")
			{
				t.SetActive(true);
				break;
			}

		// Hide all corp meshes
		foreach (string corp in EditorWindowModDesigner.AvailableCorps)
		{
			GameObject corpPreview = GameObject.Find($"SkinPreview_{corp}");
			if (corpPreview != null)
			{
				foreach (MeshRenderer corpMR in corpPreview.GetComponentsInChildren<MeshRenderer>())
				{
					corpMR.enabled = m_SelectedSkin != null && corp == m_SelectedSkin.m_Corporation;
				}
			}
			else
			{
				Debug.Log($"Could not find corp preview for corp {corp}");
			}
		}

		// Then try and find our one and unhide it
		GameObject preview = GameObject.Find($"{m_SelectedSkin.m_Corporation}_ExampleTech");
		if (preview == null)
		{
			preview = GameObject.Find($"SkinPreview_{m_SelectedSkin.m_Corporation}");
		}
		if (preview != null)
		{
			if (m_PreviewingObject == null || m_PreviewEditor.target != preview || m_PreviewDirty)
			{
				m_PreviewingObject = preview;
				if (m_PreviewEditor == null || m_PreviewEditor.target != preview)
				{
					m_PreviewEditor = CreateEditor(preview);
				}

				MeshRenderer mr = preview.GetComponent<MeshRenderer>();
				if (mr != null && mr.sharedMaterial != null)
				{
					Material testMaterial = new Material(mr.sharedMaterial);

					testMaterial.SetTexture("_MainTex", m_SelectedSkin.m_Albedo);
					testMaterial.SetTexture("_MetallicGlossMap", m_SelectedSkin.m_Combined);
					testMaterial.SetTexture("_EmissionMap", m_SelectedSkin.m_Emissive);

					mr.sharedMaterial = testMaterial;
				}
				else
				{
					Debug.LogWarning($"Could not find MeshRenderer or material on {preview.name}");
				}
			}
		}
		else Debug.LogError($"[Mods] Could not find skin preview for this corporation. Is it custom and unset or did our scene get corrupted?");

		m_PreviewDirty = false;
	}


}